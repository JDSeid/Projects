(* Generated by testfest module sml.natural.  Use me to create tests
   for use with the Unit module *)

functor UnitTestsFun(structure Bignum : BIGNUM) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Bignum
    val /+/ = <+>   val /-/ = <->   val /*/ = <*>
    fun negated n = op /-/ (ofInt 0, n)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = N.toString
  val intString = N.toString
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 1 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "1"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 4 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "4"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 237 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "237"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 28775067234 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "28775067234"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 421435589039762455970 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "421435589039762455970"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a LargeInteger with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 157606025019300 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./*/ (N./*/ (N./+/ (N.ofInt (891), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (650), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (949), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (537), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (534), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "157606025019300"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 1607049422804499665468248074520800 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./*/ (N./+/ (N./+/ (N.ofInt (722), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (51), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (438), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (7), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (345), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (229), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (382), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./*/ (N./+/ (N./+/ (N.ofInt (86), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (290), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (590), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (388), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (521), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (457), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (953), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (997), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "1607049422804499665468248074520800"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 903313510011 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (11), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (510), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (313), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (903), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "903313510011"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -594 - -907 = 313 "
                                (fn () => (natString (N./-/ (N.negated (N./+/ (N.ofInt (594), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (907), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "313"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -64552 - 894960 = -959512 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (552), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (64), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (960), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (894), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-959512"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 206494021942 - 858124063565 = -651630041623 "
                                (fn () => (intString (N./-/ (N./+/ (N.ofInt (942), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (21), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (494), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (206), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (565), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (63), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (124), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (858), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-651630041623"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -190698 using literals, *, and +"
                                (fn () => (intString (N.negated (N./-/ (N./*/ (N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (632), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (171), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (426), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-190698"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -30279748282617200 using literals, *, and +"
                                (fn () => (intString (N./*/ (N./*/ (N.negated (N./+/ (N.ofInt (52), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (121), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./-/ (N./+/ (N.ofInt (278), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (556), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (128), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (995), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N.negated (N./+/ (N./+/ (N.ofInt (966), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (109), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (20), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (460), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-30279748282617200"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -686407694541 using literals, *, and +"
                                (fn () => (intString (N.negated (N./+/ (N.ofInt (541), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (694), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (407), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (686), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-686407694541"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -396 = 667 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (396), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (667), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 497 = 999 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (497), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (999), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -98990 = 798325 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (990), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (98), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (325), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (798), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -280 != -321 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (280), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (321), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -320 != 884 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (320), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (884), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 509549 != 905399 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (549), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (509), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (399), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (905), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 306 < 624 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (306), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (624), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 801 < -33 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (33), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 399510 < 22412 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (510), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (399), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (412), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (22), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 88 > 184 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (88), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (184), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 104 > -580 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (104), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (580), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -900728 > -557063 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (728), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (900), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (63), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (557), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -182 <= -433 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (182), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (433), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 418 <= 587 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (418), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (587), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -330934 <= 607504 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (934), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (330), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (504), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (607), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 220 >= 375 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (220), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (375), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 16 >= 700 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (16), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (700), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 377496 >= 634037 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (496), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (377), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (37), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (634), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 828 = 828 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (828), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (828), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 499 = 499 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (499), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (499), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -713547 = -713547 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (547), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (713), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (547), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (713), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 372 != 372 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (372), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (372), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -14 != -14 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (14), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (14), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -200732 != -200732 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (732), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (200), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (732), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (200), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 92 < 92 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (92), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (92), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -24 < -24 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (24), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (24), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 204191 < 204191 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (191), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (204), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (191), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (204), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -776 > -776 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (776), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (776), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -456 > -456 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (456), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (456), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -677754 > -677754 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (754), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (677), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (754), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (677), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 142 <= 142 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (142), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (142), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 538 <= 538 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (538), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (538), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 257312 <= 257312 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (312), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (257), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (312), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (257), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 146 >= 146 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (146), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (146), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 154 >= 154 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (154), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (154), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 409664 >= 409664 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (664), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (409), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (664), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (409), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -572699 = 916 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (699), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (572), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (916), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -78783 = -861 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (783), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (78), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (861), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 434324803384401967 = 400 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (967), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (401), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (384), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (803), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (324), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (434), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (400), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 70074 != 132 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (74), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (70), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (132), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -886115 != -244 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (115), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (886), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (244), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -285010119113402113 != 168 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (113), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (402), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (113), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (119), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (10), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (285), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (168), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 585008 < -379 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (8), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (585), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (379), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 411743 < 551 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (743), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (411), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (551), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 568355406070822981 < 605 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (981), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (822), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (70), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (406), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (355), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (568), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (605), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -483443 > 11 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (443), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (483), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (11), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -639588 > 968 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (588), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (639), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (968), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 25045139623922355 > 13 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (355), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (922), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (623), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (139), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (45), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (25), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (13), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 425252 <= 79 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (252), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (425), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (79), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -986102 <= -141 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (102), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (986), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (141), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -781171392970619721 <= -242 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (721), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (619), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (970), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (392), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (171), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (781), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N.negated (N./+/ (N.ofInt (242), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 336724 >= 829 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (724), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (336), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (829), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 815401 >= 962 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (401), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (815), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (962), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -33792962573834045 >= 284 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (45), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (834), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (573), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (962), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (792), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (33), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (284), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
        

   in 
      Unit.report()
   end

end
