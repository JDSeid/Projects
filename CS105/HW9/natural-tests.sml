(* Generated by testfest module sml.natural.  Use me to create tests
   for use with the Unit module *)

functor UnitTestsFun(structure Natural : NATURAL) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Natural
    
    fun negated n = op /-/ (ofInt 0, n)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  val intString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 5 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "5"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 7 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "7"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 423 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "423"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 28510133303 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "28510133303"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 800224204966510085376 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "800224204966510085376"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a Natural with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 161666366400 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./*/ (N./+/ (N./+/ (N.ofInt (226), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (264), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (583), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (720), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (786), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "161666366400"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 60472091425299079925926597350 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./+/ (N./*/ (N./+/ (N.ofInt (331), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (402), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (95), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (809), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (792), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (114), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (501), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (776), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./*/ (N./+/ (N./+/ (N.ofInt (650), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (166), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (971), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (384), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (350), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (906), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (693), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (291), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "60472091425299079925926597350"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 395632421245 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (245), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (421), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (632), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (395), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "395632421245"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 951 - 904 = 47 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (951), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (904), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "47"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 535191 - 223558 = 311633 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (191), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (535), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (558), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (223), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "311633"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 758376843412 - 266011803983 = 492365039429 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (412), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (843), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (376), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (758), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (983), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (803), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (11), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (266), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "492365039429"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 868 = 616 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (868), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (616), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 959 = 416 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (959), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (416), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 179798 = 617236 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (798), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (179), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (236), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (617), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 410 != 296 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (410), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (296), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 791 != 243 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (791), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (243), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 454559 != 920773 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (559), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (454), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (773), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (920), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 461 < 313 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (461), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (313), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 866 < 423 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (866), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (423), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 974598 < 590658 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (598), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (974), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (658), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (590), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 721 > 537 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (721), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (537), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 588 > 28 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (588), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (28), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 723710 > 732746 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (710), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (723), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (746), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (732), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 701 <= 528 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (701), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (528), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 4 <= 746 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (4), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (746), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 408392 <= 422110 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (392), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (408), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (110), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (422), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 588 >= 268 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (588), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (268), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 785 >= 265 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (785), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (265), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 566484 >= 927962 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (484), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (566), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (962), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (927), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 118 = 118 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (118), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (118), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 431 = 431 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (431), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (431), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 467234 = 467234 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (234), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (467), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (234), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (467), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 480 != 480 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (480), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (480), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 142 != 142 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (142), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (142), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 10147 != 10147 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (147), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (10), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (147), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (10), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 233 < 233 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 706 < 706 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (706), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (706), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 359099 < 359099 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (99), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (359), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (99), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (359), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 884 > 884 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (884), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (884), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 417 > 417 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 246762 > 246762 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (762), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (246), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (762), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (246), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 159 <= 159 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (159), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (159), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 482 <= 482 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (482), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (482), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 162404 <= 162404 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (404), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (162), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (404), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (162), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 414 >= 414 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 683 >= 683 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (683), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (683), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 86806 >= 86806 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (806), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (86), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (806), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (86), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 600329 = 552 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (329), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (600), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (552), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 480300 = 871 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (300), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (480), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (871), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 644438775055360001 = 392 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (1), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (360), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (55), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (775), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (438), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (644), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (392), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 855296 != 59 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (296), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (855), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (59), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 670702 != 213 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (702), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (670), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (213), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 383805520690900120 != 272 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (120), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (900), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (690), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (520), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (805), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (383), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (272), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 376126 < 233 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (126), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (376), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 215445 < 611 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (445), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (215), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (611), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 461232363269017448 < 905 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (448), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (17), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (269), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (363), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (232), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (461), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (905), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 520213 > 713 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (213), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (520), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (713), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 64444 > 980 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (444), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (64), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (980), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 182361768832460509 > 644 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (509), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (460), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (832), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (768), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (361), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (182), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (644), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 622270 <= 968 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (270), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (622), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (968), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 860704 <= 96 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (704), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (860), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (96), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 104723828669619788 <= 633 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (788), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (619), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (669), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (828), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (723), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (104), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (633), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 660293 >= 350 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (293), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (660), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (350), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 431014 >= 765 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (14), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (431), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (765), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 490858123231842541 >= 642 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (541), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (842), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (231), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (123), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (858), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (490), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (642), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 173 div 6 = 28 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (173), N./*/ (N.ofInt (1000), N.ofInt (0))), 6)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "28"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 151090 div 5 = 30218 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (90), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (151), N./*/ (N.ofInt (1000), N.ofInt (0))))), 5)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "30218"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 943537338396 div 6 = 157256223066 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (396), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (338), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (537), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (943), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 6)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "157256223066"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 932 div 10 = 93 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (932), N./*/ (N.ofInt (1000), N.ofInt (0))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "93"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 910922 div 10 = 91092 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (922), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (910), N./*/ (N.ofInt (1000), N.ofInt (0))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "91092"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 692663934014 div 10 = 69266393401 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (14), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (934), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (663), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (692), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "69266393401"
        

   in 
      Unit.report()
   end

end
