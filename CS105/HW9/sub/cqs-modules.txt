Reading comprehension for Modules
=====================================
*Download* and edit this file, `cqs-modules.txt`, to answer the questions
below.  Once you've edited the file, submit it by uploading it to the
homework server and running command `submit105-cqs`.

For question 1, first read the following sections of Harper (linked from the
assignment's Canvas page) on signatures and structures: Chapter 18 up to 18.1.2,
the middle of page 145 ("Signature specialization is used...") to the end of
18.1.2, 18.2 up to 18.2.2's second paragraph (stop at "Type definitions
permeae..."), and the second paragraph of page 149 ("The use of long
identifiers...").

Now that you’ve read about structures and signatures, how do we know when a
structure *matches* a signature? Here’s the idea: given a signature SIG that
specifies a set of types T, a set of exceptions E, and a set of values V, a
structure Sig matches signature SIG if Sig provides "matching" definitions for
all types in T, restates all the exceptions in E, and gives matching definitions
(val or fun) for all values in V. Note that this means that Sig might provide
more definitions than those provided in SIG; that’s fine as long as everything
specified in SIG (the signature) is defined in Sig (the structure).

So then what's a "matching" definition?  There are two kinds: type and value.

  - A type definition in Sig *matches* a type specification in SIG if it gives
    the same name to the type constructor; here are two examples:

      Definition "type my_name = string" matches specification "type my_name".
    
      Definition "datatype my_name = NAME of string | FULLNAME of string * string" 
      also matches the specification since the datatype has the same
      name as the type specified. 
  
  - A value definition in Sig *matches* a value specification in SIG if it has
    the same name and a type that isn’t more general than the type specified:
    
      Definition "val starter = []” matches specification "val starter : 'a list". 
      
      Definition "val starter = [1]" also matches the specification, since an int list 
      is an instance of ‘a list. 

    You can also have a "fun" definition matching a "val" specification. Given
    this specification in SIG:

      val f : 'a * bool -> 'a 

    Either of the below definitions matches that specification (the names match
    and the types are not more general):

      fun f (_, false) = 10
        | f (_, true)  = 20


      fun f (x, y) = x andalso y

    The first "f" has inferred type "int * bool -> int" (since the result type
    has to match the type of the first tuple element according to SIG), while
    the second has inferred type "bool * bool -> bool". Both of these types are
    instances of the general type "'a * bool -> 'a".

Finally, now that you've read about signatures and structures (in Harper), and
matching (in this document), read the intro to Chapter 20 and section 20.2 of
Harper to learn about opaque ascription, i.e., how to name a structure that
matches a given signature __such that the name doesn't leak any information__.
Then answer the parts of question 1 below.

 1. The following structure contains definitions for an environment data
    structure, which should be somewhat familiar from code you have seen in the
    course interpreters:

        structure ExposedEnv = struct
          type name   = string
          type 'a env = (name * 'a) list
          exception NotFound of name
          val emptyEnv = []

          fun lookup (name, [])              = raise NotFound name
            | lookup (name, (x, v) :: pairs) =
                if x = name then v else lookup (name, pairs)

          fun bindVar (name, value, env) = (name, value) :: env
        end

    Here is a signature:

        signature ENV = sig
          type name = string
          type 'a env
          val emptyEnv : 'a env
          val lookup   : name * 'a env -> 'a
          val bindVar  : name * 'a * 'a env -> 'a env
        end

    Answer these questions:

    (a) Does the structure match the signature?  That is, if we write

            structure Env :> ENV = ExposedEnv

        does the resulting code typecheck?  Please answer yes or no.

            > yes

    (b) Assume the structure binding in part (a) does typecheck, i.e., we now
        have a structure identifier named "Env" through which we can access
        types, values, and exceptions declared in signature "ENV."
        Does the signature expose enough information for us to write
        the following function?  Please answer yes or no.

            fun extendEnv (names, vals, rho) =
              ListPair.foldrEq Env.bindVar rho (names, vals)

             > yes

    (c) With the same assumption from (b), does the signature expose enough 
        information for us to write the following function?  Please answer 
        yes or no.

            fun isBound (name, rho) = (Env.lookup (name,rho) ; true) 
                                      handle Env.NotFound _ => false

             > no


    (d) If, in part (b) or part (c), it is not possible to write the
        function given, change the signature to make it possible.
        If necessary, please copy, paste, and edit your new version 
        here:

        signature ENV = sig
          exception NotFound of name
          type name = string
          type 'a env
          val emptyEnv : 'a env
          val lookup   : name * 'a env -> 'a
          val bindVar  : name * 'a * 'a env -> 'a env
        end




    (e) Suppose I change the `ENV` signature to make the `name` type
        abstract, so the code reads

            signature ENV' = sig
              type name
              type 'a env
              val emptyEnv : 'a env
              val lookup   : name * 'a env -> 'a
              val bindVar  : name * 'a * 'a env -> 'a env
            end
            structure Env' :> ENV' = ExposedEnv

        The new structure `Env'`, sealed with signature `ENV'`, is useless.
        Please explain *why* it is useless:

        All of the functions that produce a nonempty environment take a name as
        an argument. It is impossible to pass a name as an argument, as it is 
        an abstract type, so there is no way to get an instance of it without a
        function that returns a name.



    *You now have the basic ideas needed to understand what is being
    asked of you in this assignment.*

For question 2, read about functors in section 23.1 in Harper.

 2. An ML _functor_ is a function that operates on the module level.
    Think of it as a "module in waiting" or a "module builder";
    a software engineer might call it a "generic module."
    A functor's _formal_ parameters, if any, are specified by a
    _sequence of declarations_, and its _actual_ parameters are given
    by a _sequence of definitions_.  A functor's _result_ is a
    structure.
    
    (a) On page 183, Harper defines a functor `DictFun` which takes one
        parameter: a structure `K` matching signature `ORDERED`, which you can
        find declared on page 162 (check that out before reading more of this
        question).  A dictionary can be implemented by a binary tree, in which
        case we need an ordering on the elements in the tree. Suppose
        instead you want to implement a dictionary using a hash table.  So you
        define a new functor `HashDictFun`, and it expects one parameter: a
        structure `K` with signature `HASHABLE`:

            functor HashDictFun(structure K : HASHABLE) :>
                      DICT where type Key.t = K.t
              =
            struct
              ... imagine your beautiful hash table here ...
            end

        The new signature `HASHABLE` is analogous to Harper's
        signature `ORDERED`: it specifies a key type `t` and two values
        capturing how to hash keys and how to compare keys.

        Fill in the complete definition of signature `HASHABLE` here:
        
            signature HASHABLE = sig
                type t 
                val hashCode : t -> int
                val equals : t * t -> bool  
                
            end
            

    (b) For each component of your `HASHABLE` signature, whether it is
        a type component or a value component, say what you expect it
        to be used for in functor `HashDictFun`.
        _Write only English_, not code:

        > type t will be assigned to whatever type the type of the key being
        used is. hashCode will be applied to each element being hashed so that
        it can be stored in the hashtable. equals will be used for lookup, to
        check if an element is already in the hashtable 


    (c) Suppose you have a structure `IntHash` that matches signature

            HASHABLE where type t = int
            
        Now suppose you apply function `DictFun`, from Harper's
        chapter, to structure `IntHash`.  This scenario is like the 
        examples on the bottom of page 184; I'm suggesting you try
        
            structure HIntDict = DictFun (structure K = IntHash).

        What will the ML compiler say?  Will it reject this
        application of DictFun or accept it?

          - If the compiler would reject the application, say one
            *specific* thing the compiler would complain about:
            
            >  The compiler would complain, as DictFun expects a structure that 
            implements the ORDERED signature. The compiler would complain that 
            structure k does not define the value lt.
            
          - If the compiler would accept the application, explain why
            the compiler would be OK with it even though the functor expects
            module `K` with signature `ORDERED` and you are giving it
            module `K` with signature `HASHABLE`:

            >

    *You now understand functors well enough to use them in the first and last
    problems of the homework.

For question 3, read the following paragraphs about abstraction functions and
invariants.

In this assignment, you will be constructing representations of natural numbers
and large integers (i.e., integers whose size isn't restricted by the size of a
register in your computer). These representations will correspond to the *ideas*
of a natural number and an integer, respectively. As an analogy, the idea of a
mathematical set can be represented with a list data structure, or a sorted
list, or a binary search tree. 

It's important to be aware of the *mapping* between your chosen representation and
the idea it's representing, and to impose *requirements* on this representation
that any functions applied to it must follow. We call the mapping an
__abstraction function__, and while it isn't typically implemented it can still
be specified with algebraic laws. For example, if we call this function "A" for
"Abstraction function", we might write these laws to map the list representation
of a set to the idea of a set (using mathematical set notation):

    A []      == { } (* The empty set *)
    A (x::xs) == { x } U A(xs), where U is the set union operator
n in
The requirements on a representation can be imposed with a boolean function (writte
our code), that we typically call "invariant." For example, for a list
representation of a set, the function would check that the list has no repeating
elements; for a sorted list representation, the function would check that the
list has no repeating elements and that its elements are sorted.

Now, answer the following question, which asks you to write invariant functions
for two representations.

 3. (a) The paragraphs above describe a sorted list as one possible
        representation for a set.  Define a ML function `invariant` that
        takes as argument a list of integers and returns a Boolean
        saying if the list is sorted in strictly ascending order
        (that is, increasing, with no repeats). 

       fun invariant []      = true
         | invariant (x::[]) = true
         | invariant (x::y::ys) = (x < y) andalso (invaraint (y::ys))
        

    (b) 
    
        Way back at the start of the semester, you learned of a proof system for
        describing natural numbers. In that system, a digit is an integer in the
        range 0 to 9 inclusive, 0 is a natural number, and if m is a natural
        number and d is a digit, then 10 * m + d is a natural number. Here is one
        possible representation for natural numbers following this proof system: 
        
            datatype nat = ZERO
                         | TIMES10PLUS of nat * int
                     

        In ML, define a function `invariant` of type
        `nat -> bool`, which returns true if and only if the given
        representation satisfies these two invariants:

            1. If given a value of the form TIMES10PLUS (m, d), then m and d are
               not both zero.


            2. If given a value of the form TIMES10PLUS (m, d), then d must be
               an integer in the range 0 <= d < 10.

        >      fun invariant (TIMES10PLUS (ZERO, 0)) = false
                 | invariant (TIMES10PLUS (_, d))    = (d >= 0) andalso (d < 10)
    

    *You are now ready to write abstraction functions and invariants
      in the last exercise of the assignment.*

For question 4, read about short division on page S21 of the textbook (it's near
the end of the book). Stop after reading the 4 steps at the bottom of the page.

 4. (a) Divide 2918 by 7, calculating both quotient and remainder.  
        At each step, you divide a two-digit number by 7.  The
        remainder is passed along to form the next two-digit number.

              _________
            7 | 2 9 1 8

        At each step of the computation, you will take a two-digit
        dividend, divide by 7, and give quotient and remainder.
        The first step is

              02 divided by 7  ==  0 remainder 2
              29 divided by 7  ==  4 remainder 1
              11 divided by 7  ==  1 remainder 4
              48 divided by 7  ==  6 remainder 6

        There are four steps in total.  Edit the text above to state
        the dividend, divisor, quotient, and remainder at each step.
        Here, write the final four-digit quotient and the one-digit
        remainder:
           
    *You are now ready to implement short division on natural numbers
    (for exercise 2).*

When we think of numbers, we typically use a base-10 system, where each digit
(possibilities include 0, 1, ..., 9) in the number is multiplied by a power of
10 to form the full value. There are other common systems too, like base-2 (or
binary), where each digit (0 or 1) is multiplied by a power of 2, and base-8 (or
octal) where each digit (0, 1, ..., 7) is multiplied by a power of 8. Given a
number in base-n, it can be converted to an equivalent number in base-m 
(where m < n) by a sequence of short division operations. Read the "Using 
short division for base conversion" section of the "Mastering Multiprecision 
Arithmetic" handout (linked from this assignment's Canvas page) to learn about
this, then answer the next question.

 5. Following the examples in the section "Using short division for base
    conversion," convert a number from decimal to binary and another number from
    decimal to octal.

    (a) Using repeated division by 2, convert decimal 13 to binary.
        The ["Mastering Multiprecision Arithmetic"]{canvas=mastering-arith.pdf}
        handout shows the form, so please just fill in the right-hand
        sides here: 

              q0 = 6         r0 = 1
              q1 = 3         r1 = 0
              q2 = 1         r2 = 1
              q3 = 0         r3 = 1

        Now write the converted numeral here: 1101 

    (b) Using repeated division by 8, convert decimal 25 to octal 31.
        Follow the same model: at each step, give the intermediate
        quotient and remainder, and then form the final quotient by
        reading off the remainders.

            q0 = 3          r0 = 1
            q1 = 0          r1 = 3

            Converted number : 31

    *You are now ready to implement the `decimal` operation on natural
    numbers (for exercise 2).  This will also enable you to implement
    the `toString` operation on signed integers.*

   
